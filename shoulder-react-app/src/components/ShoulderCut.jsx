/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ShoulderCutV.gltf
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'

export function ShoulderCut({ visibility, ...props }) {
  const { nodes, materials } = useGLTF('/ShoulderCut.gltf')
  const group = useRef()
  
  useEffect(() => {
    materials['Skin TXT'].depthWrite = true;
    materials['Muscle TXT'].depthWrite = true;
    materials['Bone TXT'].depthWrite = true;
    materials['Ligmant TXT'].depthWrite = true;
  }, [materials]);

  function formatPropData(propData) {
    const splitData = propData.split(/-| \u2013 /);

    const name = splitData[0].trim();
    var description = "";
    if(splitData.length > 1) description = splitData[1].trim();
    else description = "";
    
    description = description.replace(/(Insertion:|Origin:)/g, '<br><b>$1</b>');
    
    const formattedDescription = `<p>${description}</p>`;
    
    return formattedDescription;
}

function replaceUnderscoreWithSpace(nodes) {
  for (const element in nodes) {
      if (nodes[element].hasOwnProperty('userData') && nodes[element].userData.hasOwnProperty('name')) {
          nodes[element].userData.name = nodes[element].userData.name.replace(/_/g, ' ');
      }
  }
}

replaceUnderscoreWithSpace(nodes);


  return (
    <group ref={group} {...props} dispose={null}>
      <group name='Scene'>
        {visibility <= 4 && (
              <>
                <mesh geometry={nodes.Scapular_spine.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Scapular_spine.userData}/>
                <mesh geometry={nodes.Scapula.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Scapula.userData}/>
                <mesh geometry={nodes.Lesser_tubercle.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Lesser_tubercle.userData}/>
                <mesh geometry={nodes.Humerus.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Humerus.userData}/>
                <mesh geometry={nodes.Head_of_humerus.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Head_of_humerus.userData}/>
                <mesh geometry={nodes.Greater_tubercle.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Greater_tubercle.userData}/>
                <mesh geometry={nodes.Glenoid_fossa.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Glenoid_fossa.userData}/>
                <mesh geometry={nodes.Deltoid_tuberosity.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Deltoid_tuberosity.userData}/>
                <mesh geometry={nodes.Coracoid_process.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Coracoid_process.userData}/>
                <mesh geometry={nodes.Clavicle.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Clavicle.userData}/>
                <mesh geometry={nodes.Acromion.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Acromion.userData}/>
                <mesh geometry={nodes.Acromioclavicular_joint.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Acromioclavicular_joint.userData}/>
              </>
            )}
            {visibility <= 3 && (
              <>
                <mesh geometry={nodes.Superior_Transverse_Scapular_Ligament.geometry} material={materials['Ligmant TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{name: nodes.Superior_Transverse_Scapular_Ligament.userData.name , prop: formatPropData(nodes.Superior_Transverse_Scapular_Ligament.userData.prop)}}/>
                <mesh geometry={nodes.Glenohumeral_Ligament.geometry} material={materials['Ligmant TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{name: nodes.Glenohumeral_Ligament.userData.name , prop: formatPropData(nodes.Glenohumeral_Ligament.userData.prop)}}/>
                <mesh geometry={nodes.Joint_Capsule.geometry} material={materials['Ligmant TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{name: nodes.Joint_Capsule.userData.name , prop: formatPropData(nodes.Joint_Capsule.userData.prop)}}/>
                <mesh geometry={nodes.Coracoacromial_Ligament.geometry} material={materials['Ligmant TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{name: nodes.Coracoacromial_Ligament.userData.name , prop: formatPropData(nodes.Coracoacromial_Ligament.userData.prop)}}/>
                <mesh geometry={nodes.Acromioclavicular_Ligament.geometry} material={materials['Ligmant TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{name: nodes.Acromioclavicular_Ligament.userData.name , prop: formatPropData(nodes.Acromioclavicular_Ligament.userData.prop)}}/>
                <mesh geometry={nodes.Trapezoid_ligament.geometry} material={materials['Ligmant TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{name: nodes.Trapezoid_ligament.userData.name , prop: formatPropData(nodes.Trapezoid_ligament.userData.prop)}}/>
                <mesh geometry={nodes.Conoid_ligament.geometry} material={materials['Ligmant TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{name: nodes.Conoid_ligament.userData.name , prop: formatPropData(nodes.Conoid_ligament.userData.prop)}}/>
                <mesh geometry={nodes.Transverse_humeral_ligament.geometry} material={materials['Ligmant TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{name: nodes.Transverse_humeral_ligament.userData.name , prop: formatPropData(nodes.Transverse_humeral_ligament.userData.prop)}}/>
              </>
            )}
          {visibility <= 2 && (
            <>
              <mesh geometry={nodes.Triceps_Brachii.geometry} material={materials['Muscle TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{name: nodes.Triceps_Brachii.userData.name , prop: formatPropData(nodes.Triceps_Brachii.userData.prop)}}/>
              <mesh geometry={nodes.Teres_minor.geometry} material={materials['Muscle TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{name: nodes.Teres_minor.userData.name, prop: formatPropData(nodes.Teres_minor.userData.prop)}}/>
              <mesh geometry={nodes.Teres_major.geometry} material={materials['Muscle TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{name: nodes.Teres_major.userData.name, prop: formatPropData(nodes.Teres_major.userData.prop)}}/>
              <mesh geometry={nodes.Supraspinatus.geometry} material={materials['Muscle TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{name: nodes.Supraspinatus.userData.name, prop: formatPropData(nodes.Supraspinatus.userData.prop)}}/>
              <mesh geometry={nodes.Subscapularis.geometry} material={materials['Muscle TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{name: nodes.Subscapularis.userData.name, prop: formatPropData(nodes.Subscapularis.userData.prop)}}/>
              <mesh geometry={nodes.Infraspinatus.geometry} material={materials['Muscle TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{name: nodes.Infraspinatus.userData.name, prop: formatPropData(nodes.Infraspinatus.userData.prop)}}/>
              <mesh geometry={nodes.Deltoid.geometry} material={materials['Muscle TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{name: nodes.Deltoid.userData.name, prop: formatPropData(nodes.Deltoid.userData.prop)}}/>
              <mesh geometry={nodes.Biceps_Brachii.geometry} material={materials['Muscle TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{name: nodes.Biceps_Brachii.userData.name, prop: formatPropData(nodes.Biceps_Brachii.userData.prop)}}/>
            </>
          )}
          {visibility == 1 && (
              <mesh geometry={nodes.Skin001.geometry} material={materials['Skin TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{prop: "", name:"Skin"}} />
            )}
      

      </group>
    </group>
  )
}

/**
      <mesh geometry={nodes.Trapezius_muscle_bulk.geometry} material={materials['Skin TXT']} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Skin.geometry} material={materials['Skin TXT']} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Medial_border_of_scapula.geometry} material={materials['Skin TXT']} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Deltoid_muscle_bulk.geometry} material={materials['Skin TXT']} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Clavical_Contour.geometry} material={materials['Skin TXT']} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Acromioclavicular_joint001.geometry} material={materials['Skin TXT']} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Deltoid_muscle_bulk_V2.geometry} material={materials['Skin TXT']} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Skin_v2001.geometry} material={materials['Skin TXT']} rotation={[Math.PI / 2, 0, 0]} />
 */

useGLTF.preload('/ShoulderCut.gltf')

export default (props) => (
  <ShoulderCut {...props}/>
)

