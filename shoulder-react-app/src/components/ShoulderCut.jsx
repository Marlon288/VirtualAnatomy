/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public\ShoulderCutNew.gltf
*/

import React, { useRef , useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import data from './data/data.js';

export function ShoulderCut({ visibility, ...props }) {
  const { nodes, materials } = useGLTF('/Model/ShoulderCutNew.gltf')
  const group = useRef()

  useEffect(() => {
    materials['Skin TXT'].depthWrite = true;
    materials['Muscle TXT'].depthWrite = true;
    materials['Bone TXT'].depthWrite = true;
    materials['Ligmant TXT'].depthWrite = true;
    materials.Plasters.depthWrite = true;
  }, [materials]);

  function formatPropData(propData) {
    const splitData = propData.split(/-| \u2013 /);

    const name = splitData[0].trim();
    var description = "";
    if(splitData.length > 1) description = splitData[1].trim();
    else description = "";
    
    description = description.replace(/(Insertion:|Origin:)/g, '<br><b>$1</b>');
    
    const formattedDescription = `<p>${description}</p>`;
    
    return formattedDescription;
}


function replaceUnderscoreWithSpace(nodes) {
  const keys = Object.keys(data);
  for (const element in nodes) {
      if (nodes[element].hasOwnProperty('userData') && nodes[element].userData.hasOwnProperty('name') && element != undefined) {
          if(element in data){
            
            nodes[element].userData.prop = formatPropData(data[element].prop);
            nodes[element].userData.name = data[element].name;
          }else{
            nodes[element].userData.prop = "";
            nodes[element].userData.name = "";
          }
       
      } else nodes[element].userData = {name: "", prop: ""}
      
  }
}

replaceUnderscoreWithSpace(nodes);
return (
  <group ref={group} {...props} dispose={null}>
  <group name='Scene'>
    {visibility <= 4 && (
          <> 
            <mesh geometry={nodes.Scapular_spine.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Scapular_spine.userData}/>
            <mesh geometry={nodes.Scapula.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Scapula.userData}/>
            <mesh geometry={nodes.Lesser_tubercle.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Lesser_tubercle.userData}/>
            <mesh geometry={nodes.Humerus.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Humerus.userData}/>
            <mesh geometry={nodes.Head_of_humerus.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Head_of_humerus.userData}/>
            <mesh geometry={nodes.Greater_tubercle.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Greater_tubercle.userData}/>
            <mesh geometry={nodes.Glenoid_fossa.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Glenoid_fossa.userData}/>
            <mesh geometry={nodes.Deltoid_tuberosity.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Deltoid_tuberosity.userData}/>
            <mesh geometry={nodes.Coracoid_process.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Coracoid_process.userData}/>
            <mesh geometry={nodes.Clavicle.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Clavicle.userData}/>
            <mesh geometry={nodes.Acromion.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Acromion.userData}/>
            <mesh geometry={nodes.Acromioclavicular_joint.geometry} material={materials['Bone TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Acromioclavicular_joint.userData}/>

          </>
        )}
        {visibility <= 3 && (
          <>
            <mesh geometry={nodes.Superior_Transverse_Scapular_Ligament.geometry} material={materials['Ligmant TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Superior_Transverse_Scapular_Ligament.userData}/>
            <mesh geometry={nodes.Glenohumeral_Ligament.geometry} material={materials['Ligmant TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Glenohumeral_Ligament.userData}/>
            <mesh geometry={nodes.Joint_Capsule.geometry} material={materials['Ligmant TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Joint_Capsule.userData}/>
            <mesh geometry={nodes.Coracoacromial_Ligament.geometry} material={materials['Ligmant TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Coracoacromial_Ligament.userData}/>
            <mesh geometry={nodes.Acromioclavicular_Ligament.geometry} material={materials['Ligmant TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Acromioclavicular_Ligament.userData}/>
            <mesh geometry={nodes.Trapezoid_ligament.geometry} material={materials['Ligmant TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Trapezoid_ligament.userData}/>
            <mesh geometry={nodes.Conoid_ligament.geometry} material={materials['Ligmant TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Conoid_ligament.userData.name}/>
            <mesh geometry={nodes.Transverse_humeral_ligament.geometry} material={materials['Ligmant TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Transverse_humeral_ligament.userData}/>
          </>
        )}
      {visibility <= 2 && (
        <>
          <mesh geometry={nodes.Triceps_Brachii.geometry} material={materials['Muscle TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Triceps_Brachii.userData}/>
          <mesh geometry={nodes.Teres_minor.geometry} material={materials['Muscle TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Teres_minor.userData}/>
          <mesh geometry={nodes.Teres_major.geometry} material={materials['Muscle TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Teres_major.userData}/>
          <mesh geometry={nodes.Supraspinatus.geometry} material={materials['Muscle TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Supraspinatus.userData}/>
          <mesh geometry={nodes.Subscapularis.geometry} material={materials['Muscle TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Subscapularis.userData}/>
          <mesh geometry={nodes.Infraspinatus.geometry} material={materials['Muscle TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Infraspinatus.userData}/>
          <mesh geometry={nodes.Deltoid.geometry} material={materials['Muscle TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Deltoid.userData}/>
          <mesh geometry={nodes.Biceps_Brachii.geometry} material={materials['Muscle TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Biceps_Brachii.userData}/>
        </>
      )}
      {visibility == 1 && (
          <>
            <mesh geometry={nodes.Skin001.geometry} material={materials['Skin TXT']} rotation={[Math.PI / 2, 0, 0]} UserData={{prop: "", name:"Skin"}} />
            <mesh geometry={nodes.Calvicle_Overlay.geometry} material={materials.Plasters} rotation={[Math.PI / 2, 0, 0] }  UserData={nodes.Calvicle_Overlay.userData}/>
            <mesh geometry={nodes.Scapula_Overlay.geometry} material={materials.Plasters} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Scapula_Overlay.userData}/>
            <mesh geometry={nodes.Glenohumeral_joint_overlay.geometry} material={materials.Plasters} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Glenohumeral_joint_overlay.userData}/>
            <mesh geometry={nodes.Coracoid_process_overlay.geometry} material={materials.Plasters} position={[0, 0, 0.19]} rotation={[Math.PI / 2, 0, 0]} UserData={nodes.Coracoid_process_overlay.userData}/>
          </>
        )}
  

    </group>
  </group>
  )
}

export default (props) => (
  <ShoulderCut {...props}/>
)
useGLTF.preload('/Model/ShoulderCutNew.gltf')

